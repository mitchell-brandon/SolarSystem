{"ast":null,"code":"var _jsxFileName = \"/Users/mitchellbrandon/Desktop/solar-system-react/src/components/ComponentRender.js\";\nimport MassDiam from \"./MassDiam\";\nimport Distances from \"./Distances\";\nimport Temperatures from \"./Temperatures\";\nimport Days from \"./Days\";\nimport Years from \"./Years\";\nimport Moons from \"./Moons\";\nimport solarJSON from \"../solar_system.json\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ComponentRender(props) {\n  let radioValue = props.radioValue; //THIS IS A REUSABLE FUNCTION BEING INVOKED IN GRAPH.JS, THE GRAND CHILD COMPONENT\n  // IT TAKES NUMERICAL ARGUMENTS. PLEASE READ NOTES IN GRAPH.JS\n\n  function rangeCounter(values) {\n    let tempGraphValues = [];\n    const horizontalBar = 'data-division';\n\n    for (let value of values) {\n      while (value[0] < value[1]) {\n        tempGraphValues.push(value[0] += value[2]);\n      }\n\n      tempGraphValues.push(horizontalBar);\n    }\n\n    tempGraphValues.sort(function (a, b) {\n      return b - a;\n    });\n    return tempGraphValues;\n  } // QUERIES solarJSON AND CONITIONALLY RENDERS PLANETS BASED ON RADIO VALUE\n\n\n  let planets = [];\n\n  function filterPlanets() {\n    for (let object of solarJSON) {\n      planets.push(object);\n    }\n\n    planets.pop();\n\n    if (radioValue === 'masses' || radioValue === 'diameters' || radioValue === 'distances' || radioValue === 'moons' || radioValue === 'years') {\n      planets.shift();\n    } else {\n      return;\n    }\n  }\n\n  filterPlanets(); //DETERMINES CURRENT COMPONENT RENDERING\n\n  function renderComponents(component) {\n    if (radioValue === 'diameters') {\n      component = /*#__PURE__*/_jsxDEV(MassDiam, {\n        radioValue: radioValue,\n        planets: planets\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 21\n      }, this);\n    } else if (radioValue === 'masses') {\n      component = /*#__PURE__*/_jsxDEV(MassDiam, {\n        radioValue: radioValue,\n        planets: planets\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 21\n      }, this);\n    } else if (radioValue === 'distances') {\n      component = /*#__PURE__*/_jsxDEV(Distances, {\n        radioValue: radioValue,\n        planets: planets\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 21\n      }, this);\n    } else if (radioValue === 'temperatures') {\n      component = /*#__PURE__*/_jsxDEV(Temperatures, {\n        radioValue: radioValue,\n        rangeCounter: rangeCounter,\n        planets: planets\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 21\n      }, this);\n    } else if (radioValue === 'days') {\n      component = /*#__PURE__*/_jsxDEV(Days, {\n        radioValue: radioValue,\n        rangeCounter: rangeCounter,\n        planets: planets\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 19\n      }, this);\n    } else if (radioValue === 'years') {\n      component = /*#__PURE__*/_jsxDEV(Years, {\n        radioValue: radioValue,\n        rangeCounter: rangeCounter,\n        planets: planets\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 19\n      }, this);\n    } else if (radioValue === 'moons') {\n      component = /*#__PURE__*/_jsxDEV(Moons, {\n        radioValue: radioValue,\n        planets: planets\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 19\n      }, this);\n    } else {\n      component = '';\n    }\n\n    return component;\n  }\n\n  return renderComponents();\n}\n\n_c = ComponentRender;\nexport default ComponentRender;\n\nvar _c;\n\n$RefreshReg$(_c, \"ComponentRender\");","map":{"version":3,"sources":["/Users/mitchellbrandon/Desktop/solar-system-react/src/components/ComponentRender.js"],"names":["MassDiam","Distances","Temperatures","Days","Years","Moons","solarJSON","ComponentRender","props","radioValue","rangeCounter","values","tempGraphValues","horizontalBar","value","push","sort","a","b","planets","filterPlanets","object","pop","shift","renderComponents","component"],"mappings":"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","sourcesContent":["import MassDiam from \"./MassDiam\";\nimport Distances from \"./Distances\";\nimport Temperatures from \"./Temperatures\";\nimport Days from \"./Days\";\nimport Years from \"./Years\";\nimport Moons from \"./Moons\";\nimport solarJSON from \"../solar_system.json\";\n\nfunction ComponentRender(props) {\n\n  let radioValue = props.radioValue;\n\n\n  //THIS IS A REUSABLE FUNCTION BEING INVOKED IN GRAPH.JS, THE GRAND CHILD COMPONENT\n  // IT TAKES NUMERICAL ARGUMENTS. PLEASE READ NOTES IN GRAPH.JS\n  function rangeCounter(values){ \n    let tempGraphValues = [];\n    const horizontalBar = 'data-division'\n\n    for (let value of values){\n      while (value[0] < value[1]){\n          tempGraphValues.push(value[0]+= value[2])\n      }\n      tempGraphValues.push(horizontalBar)\n    }\n\n    tempGraphValues.sort(function(a, b){return b - a});\n    return tempGraphValues\n  }\n\n  // QUERIES solarJSON AND CONITIONALLY RENDERS PLANETS BASED ON RADIO VALUE\n  let planets =[];\n  function filterPlanets() {\n    for(let object of solarJSON){\n      planets.push(object)\n    }\n    planets.pop()\n    if(radioValue === 'masses' || radioValue === 'diameters'\n      || radioValue ==='distances' || radioValue === 'moons'\n      || radioValue=== 'years'){\n      planets.shift()\n    } else {\n      return\n    }\n  }\n  filterPlanets()\n\n  //DETERMINES CURRENT COMPONENT RENDERING\n  function renderComponents (component) {\n    if (radioValue === 'diameters') {\n        component = <MassDiam radioValue={radioValue} planets={planets}/>\n    } else if (radioValue === 'masses'){\n        component = <MassDiam radioValue={radioValue} planets={planets}/>\n    } else if (radioValue === 'distances'){\n        component = <Distances radioValue={radioValue} planets={planets}/>\n    } else if (radioValue === 'temperatures'){\n        component = <Temperatures radioValue={radioValue} rangeCounter={rangeCounter} planets={planets}/>\n    } else if (radioValue === 'days'){\n      component = <Days radioValue={radioValue} rangeCounter={rangeCounter} planets={planets}/>\n    } else if (radioValue === 'years'){\n      component = <Years radioValue={radioValue} rangeCounter={rangeCounter} planets={planets}/>\n    } else if (radioValue === 'moons') {\n      component = <Moons radioValue={radioValue} planets={planets}/>\n    } else {\n      component = ''\n    }\n    return component\n  }\n\n\n  return (\n    renderComponents()\n  )\n}\n\nexport default ComponentRender;\n"]},"metadata":{},"sourceType":"module"}