{"ast":null,"code":"import _createForOfIteratorHelper from\"/Users/mitchellbrandon/Desktop/solar-system-react/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";import MassDiam from\"./MassDiam\";import Distances from\"./Distances\";import Temperatures from\"./Temperatures\";import Days from\"./Days\";import Years from\"./Years\";import Moons from\"./Moons\";import solarJSON from\"../solar_system.json\";import{jsx as _jsx}from\"react/jsx-runtime\";function ComponentRender(props){var radioValue=props.radioValue;//THIS IS A REUSABLE FUNCTION BEING INVOKED IN GRAPH.JS, THE GRAND CHILD COMPONENT\n// IT TAKES NUMERICAL ARGUMENTS. PLEASE READ NOTES IN GRAPH.JS\nfunction rangeCounter(values){var tempGraphValues=[];var horizontalBar='data-division';var _iterator=_createForOfIteratorHelper(values),_step;try{for(_iterator.s();!(_step=_iterator.n()).done;){var value=_step.value;while(value[0]<value[1]){tempGraphValues.push(value[0]+=value[2]);}tempGraphValues.push(horizontalBar);}}catch(err){_iterator.e(err);}finally{_iterator.f();}tempGraphValues.sort(function(a,b){return b-a;});return tempGraphValues;}// QUERIES solarJSON AND CONITIONALLY RENDERS PLANETS BASED ON RADIO VALUE\nvar planets=[];function filterPlanets(){var _iterator2=_createForOfIteratorHelper(solarJSON),_step2;try{for(_iterator2.s();!(_step2=_iterator2.n()).done;){var object=_step2.value;planets.push(object);}}catch(err){_iterator2.e(err);}finally{_iterator2.f();}planets.pop();if(radioValue==='masses'||radioValue==='diameters'||radioValue==='distances'||radioValue==='moons'||radioValue==='years'){planets.shift();}else{return;}}filterPlanets();//DETERMINES CURRENT COMPONENT RENDERING\nfunction renderComponents(component){if(radioValue==='diameters'){component=/*#__PURE__*/_jsx(MassDiam,{radioValue:radioValue,planets:planets});}else if(radioValue==='masses'){component=/*#__PURE__*/_jsx(MassDiam,{radioValue:radioValue,planets:planets});}else if(radioValue==='distances'){component=/*#__PURE__*/_jsx(Distances,{radioValue:radioValue,planets:planets});}else if(radioValue==='temperatures'){component=/*#__PURE__*/_jsx(Temperatures,{radioValue:radioValue,rangeCounter:rangeCounter,planets:planets});}else if(radioValue==='days'){component=/*#__PURE__*/_jsx(Days,{radioValue:radioValue,rangeCounter:rangeCounter,planets:planets});}else if(radioValue==='years'){component=/*#__PURE__*/_jsx(Years,{radioValue:radioValue,rangeCounter:rangeCounter,planets:planets});}else if(radioValue==='moons'){component=/*#__PURE__*/_jsx(Moons,{radioValue:radioValue,planets:planets});}else{component='';}return component;}return renderComponents();}export default ComponentRender;","map":{"version":3,"sources":["/Users/mitchellbrandon/Desktop/solar-system-react/src/components/ComponentRender.js"],"names":["MassDiam","Distances","Temperatures","Days","Years","Moons","solarJSON","ComponentRender","props","radioValue","rangeCounter","values","tempGraphValues","horizontalBar","value","push","sort","a","b","planets","filterPlanets","object","pop","shift","renderComponents","component"],"mappings":"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","sourcesContent":["import MassDiam from \"./MassDiam\";\nimport Distances from \"./Distances\";\nimport Temperatures from \"./Temperatures\";\nimport Days from \"./Days\";\nimport Years from \"./Years\";\nimport Moons from \"./Moons\";\nimport solarJSON from \"../solar_system.json\";\n\nfunction ComponentRender(props) {\n\n  let radioValue = props.radioValue;\n\n\n  //THIS IS A REUSABLE FUNCTION BEING INVOKED IN GRAPH.JS, THE GRAND CHILD COMPONENT\n  // IT TAKES NUMERICAL ARGUMENTS. PLEASE READ NOTES IN GRAPH.JS\n  function rangeCounter(values){ \n    let tempGraphValues = [];\n    const horizontalBar = 'data-division'\n\n    for (let value of values){\n      while (value[0] < value[1]){\n          tempGraphValues.push(value[0]+= value[2])\n      }\n      tempGraphValues.push(horizontalBar)\n    }\n\n    tempGraphValues.sort(function(a, b){return b - a});\n    return tempGraphValues\n  }\n\n  // QUERIES solarJSON AND CONITIONALLY RENDERS PLANETS BASED ON RADIO VALUE\n  let planets =[];\n  function filterPlanets() {\n    for(let object of solarJSON){\n      planets.push(object)\n    }\n    planets.pop()\n    if(radioValue === 'masses' || radioValue === 'diameters'\n      || radioValue ==='distances' || radioValue === 'moons'\n      || radioValue=== 'years'){\n      planets.shift()\n    } else {\n      return\n    }\n  }\n  filterPlanets()\n\n  //DETERMINES CURRENT COMPONENT RENDERING\n  function renderComponents (component) {\n    if (radioValue === 'diameters') {\n        component = <MassDiam radioValue={radioValue} planets={planets}/>\n    } else if (radioValue === 'masses'){\n        component = <MassDiam radioValue={radioValue} planets={planets}/>\n    } else if (radioValue === 'distances'){\n        component = <Distances radioValue={radioValue} planets={planets}/>\n    } else if (radioValue === 'temperatures'){\n        component = <Temperatures radioValue={radioValue} rangeCounter={rangeCounter} planets={planets}/>\n    } else if (radioValue === 'days'){\n      component = <Days radioValue={radioValue} rangeCounter={rangeCounter} planets={planets}/>\n    } else if (radioValue === 'years'){\n      component = <Years radioValue={radioValue} rangeCounter={rangeCounter} planets={planets}/>\n    } else if (radioValue === 'moons') {\n      component = <Moons radioValue={radioValue} planets={planets}/>\n    } else {\n      component = ''\n    }\n    return component\n  }\n\n\n  return (\n    renderComponents()\n  )\n}\n\nexport default ComponentRender;\n"]},"metadata":{},"sourceType":"module"}